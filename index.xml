<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Ingotte</title>
    <link>https://EnzoLinShx.github.io/</link>
    <description>Recent content on Ingotte</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 29 May 2022 15:37:03 +0800</lastBuildDate><atom:link href="https://EnzoLinShx.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Unicode编码-基础知识</title>
      <link>https://EnzoLinShx.github.io/posts/unicode_encoding/</link>
      <pubDate>Sun, 29 May 2022 15:37:03 +0800</pubDate>
      
      <guid>https://EnzoLinShx.github.io/posts/unicode_encoding/</guid>
      <description>基础概念 Unicode是现代计算机文字处理和交换的业界标准，第一版于1991年发布，2021年发布14.0版。标准核心规定了一个编码空间（code space）和码表（code chart），以及字符对应的码点（code point）。每个码点有多个编码方式，Unicode定义了UTF-8、UTF-16和UTF-32三种编码方式。除此之外，由于人类文字的复杂性，Unicode标准还包含判定字符等价、书写方向、拆分标准等内容。
本文主要介绍Unicode的三种编码方式。
编码空间 Unicode使用无符号六位十六进制整数作为其编码空间，注意的是其使用的范围是0到10FFFF，而不是到FFFFFF，并没有用到每一个数。
编码空间被分为17个平面（plane），每个平面包含$16^4$个码点。另外根据文字特征等条件，还会细分成不同区块，每个平面的定义见The Unicode Standard: Core Specification的Detail Allocation一节。
在表示编码空间内的字符时，通常使用U+作为前缀，码点编码不足4位时，会添加前导零。如大写字母A的编码为U+0041。
UTF-32 UTF-32是最简单的编码方式，固定宽度编码，使用32个比特编码一个码点。如大写字母A（U+0041），十六进制的41即二进制1000001，U+0041被编码为00000000 00000000 00000000 01000001。
需要注意的是，32个bit的范围超过Unicode的编码空间，Unicode规定首位必须为0，因此UTF-32可以表示$2^31$个码点，但是实际上Unicode编码空间仅规定了$2^16+2^20$个码点。
UTF-16 UTF-16是变宽编码，使用1至2位16比特编码，也就是说实际编码长度可能为16比特或32比特。
对于U+0000到U+D700和U+E000到U+FFFF的字符，直接使用一个16比特表示，如大写字母A即为00000000 01000001。
U+D800到U+DFFF称之为代理对（surrogate pair），使用两个代理对组合映射到非单个16比特编码可以解决的码位。
  第一位，称之为高位（high surrogate）或前置位（leading surrogate），范围为U+D800到U+D8FF；
  第二位，称之为低位（low surrogate）或后置位（trailing surrogate），范围为U+DC00到U+DFFF。
  高位和低位组成一个编码，映射U+10000到U+10FFFF的码位。
    DC00 DC01 &amp;hellip; DFFF     D800 010000 010001 &amp;hellip; 0103FF   D801 010400 010401 &amp;hellip; 0107FF   &amp;hellip; &amp;hellip; &amp;hellip; &amp;hellip; &amp;hellip;   DBFF 10FC00 10FC01 &amp;hellip; 10FFFF    如汉字「𡸷」（U+21E37），其编码由代理对U+D847和U+DE37组成，即11011000 01000111 11011110 00110111。</description>
    </item>
    
    <item>
      <title>Murmur 001</title>
      <link>https://EnzoLinShx.github.io/posts/murmur_001/</link>
      <pubDate>Sat, 14 May 2022 08:47:11 +0100</pubDate>
      
      <guid>https://EnzoLinShx.github.io/posts/murmur_001/</guid>
      <description>OpenCart处理页面的基础原理是：
对于路由为&amp;lt;parentCategory&amp;gt;/&amp;lt;pageName&amp;gt;的页面
 ./catalog/view/theme/&amp;lt;youTheme&amp;gt;/template/&amp;lt;parentCategory&amp;gt;/&amp;lt;pageName&amp;gt;.twig文件包含HTML模版 ./catalog/view/language/&amp;lt;languageCode&amp;gt;/&amp;lt;parentCategory&amp;gt;/&amp;lt;pageName&amp;gt;.php包含本地化翻译 ./catalog/model/&amp;lt;parentCategory&amp;gt;/&amp;lt;actionName&amp;gt;.php包含操作数据库的定义  最终，当请求页面时，./catalog/controller/&amp;lt;parentCategory&amp;gt;/&amp;lt;pageName&amp;gt;.php负责整合以上3个文件的逻辑，返回特定的HTML文件。
然而，奇怪的是，common/home，也就是主页的路由，它的controller文件少了读取本地化翻译的指令，默认情况下无法通过直接修改上述文件完成多语言页面修改，只能通过拓展插件的形式达到目的。
解决的方法也很简单，在./catalog/controller/common/home.php加入下述代码即可：
$this-&amp;gt;load-&amp;gt;language(&amp;#39;common/home&amp;#39;); </description>
    </item>
    
  </channel>
</rss>
